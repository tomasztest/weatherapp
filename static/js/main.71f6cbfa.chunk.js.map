{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","type","value","onChange","change","placeholder","Result","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAeeA,G,MAbF,SAAAC,GACX,OACE,8BACE,2BACEC,KAAK,OACLC,MAAOF,EAAME,MACbC,SAAUH,EAAMI,OAChBC,YAAY,oBCiCLC,G,MAvCA,SAAAN,GAAU,IAAD,EAUlBA,EAAMO,QARRC,EAFoB,EAEpBA,KACAC,EAHoB,EAGpBA,KACAC,EAJoB,EAIpBA,QACAC,EALoB,EAKpBA,OACAC,EANoB,EAMpBA,KACAC,EAPoB,EAOpBA,SACAC,EARoB,EAQpBA,KACAC,EAToB,EASpBA,IAGEC,EAAU,KAEd,IAAKD,GAAON,EAAM,CAChB,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAC3CH,EACE,oCACE,0CACa,4BAAKP,IAElB,uDAA6BD,GAC7B,4CAAkBI,EAAlB,UACA,oEAA6BK,GAC7B,oEAA6BG,GAC7B,+CAAgBP,EAAhB,QACA,gDAAiBC,EAAjB,SAKN,OACE,yBAAKO,UAAU,UACZN,EAAG,6CAAoCN,GAASO,KC4ExCM,E,2MAzGbC,MAAQ,CACNrB,MAAO,GACPM,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,IAAK,I,EAGPS,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZxB,MAAOuB,EAAEE,OAAOzB,S,kFAwCD0B,EAAWC,GAAY,IAAD,OACvC,GAAgC,IAA5BC,KAAKP,MAAMrB,MAAM6B,QACjBF,EAAU3B,QAAU4B,KAAKP,MAAMrB,MAAO,CACxC,IAAM8B,EAAG,2DAAuDF,KAAKP,MAAMrB,MAAlE,kBA7DH,mCA6DG,iBAET+B,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAItB,MAAOuB,iBACxB,EAAKf,UAAS,SAAAG,GAAS,MAAK,CAC1Bd,KAAK,EACLP,KAAMgC,EACN/B,KAAMoB,EAAU3B,MAChBQ,QAAS6B,EAAKG,IAAIhC,QAClBC,OAAQ4B,EAAKG,IAAI/B,OACjBC,KAAM2B,EAAKI,KAAK/B,KAChBC,SAAU0B,EAAKI,KAAK9B,SACpBC,KAAMyB,EAAKzB,KAAK8B,aAGnBC,OAAM,SAAA9B,GACL+B,QAAQC,IAAIhC,GACZ,EAAKW,UAAS,SAAAG,GACZ,MAAO,CACLd,KAAK,EACLN,KAAMoB,EAAU3B,gB,+BAS1B,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAMnB,MAAO4B,KAAKP,MAAMrB,MAAOE,OAAQ0B,KAAKN,oBAC5C,kBAAC,EAAD,CAAQjB,QAASuB,KAAKP,c,GApGdyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.71f6cbfa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"wpisz miasto\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <>\r\n        <h3>\r\n          Pogoda dla <em>{city}</em>\r\n        </h3>\r\n        <h4>Dane dla dnia i godziny {date}</h4>\r\n        <h4>Temperatura: {temp} &#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Ciśnienie: {pressure} hPa</h4>\r\n        <h4>Siła wiatru {wind} m/s</h4>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie miejscowości ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nconst APIkey = `8c666b8370f9bf634478a472bcc9a9f6`;\n\nclass App extends Component {\n  // constructor()\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: \"\"\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  // handleCitySubmit = e => {\n  //   e.preventDefault();\n  //   const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n\n  //   fetch(API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response;\n  //       }\n  //       throw Error(\"Nie udało się\");\n  //     })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       const time = new Date().toLocaleString();\n  //       this.setState(prevState => ({\n  //         err: false,\n  //         date: time,\n  //         city: prevState.value,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed\n  //       }));\n  //     })\n  //     .catch(err => {\n  //       console.log(err);\n  //       this.setState(prevState => {\n  //         return {\n  //           err: true,\n  //           city: prevState.value\n  //         };\n  //       });\n  //     });\n  // };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Nie udało się\");\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString();\n          this.setState(prevState => ({\n            err: false,\n            date: time,\n            city: prevState.value,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed\n          }));\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => {\n            return {\n              err: true,\n              city: prevState.value\n            };\n          });\n        });\n    }\n    // this.setState({})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form value={this.state.value} change={this.handleInputChange} />\n          <Result weather={this.state} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}